//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Arachnode.DataSource.Next {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ArachnodeNextDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ArachnodeNextDataSet : global::System.Data.DataSet {
        
        private DiscoveriesDataTable tableDiscoveries;
        
        private CrawlRequestsDataTable tableCrawlRequests;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArachnodeNextDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ArachnodeNextDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Discoveries"] != null)) {
                    base.Tables.Add(new DiscoveriesDataTable(ds.Tables["Discoveries"]));
                }
                if ((ds.Tables["CrawlRequests"] != null)) {
                    base.Tables.Add(new CrawlRequestsDataTable(ds.Tables["CrawlRequests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscoveriesDataTable Discoveries {
            get {
                return this.tableDiscoveries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CrawlRequestsDataTable CrawlRequests {
            get {
                return this.tableCrawlRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ArachnodeNextDataSet cln = ((ArachnodeNextDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Discoveries"] != null)) {
                    base.Tables.Add(new DiscoveriesDataTable(ds.Tables["Discoveries"]));
                }
                if ((ds.Tables["CrawlRequests"] != null)) {
                    base.Tables.Add(new CrawlRequestsDataTable(ds.Tables["CrawlRequests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDiscoveries = ((DiscoveriesDataTable)(base.Tables["Discoveries"]));
            if ((initTable == true)) {
                if ((this.tableDiscoveries != null)) {
                    this.tableDiscoveries.InitVars();
                }
            }
            this.tableCrawlRequests = ((CrawlRequestsDataTable)(base.Tables["CrawlRequests"]));
            if ((initTable == true)) {
                if ((this.tableCrawlRequests != null)) {
                    this.tableCrawlRequests.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ArachnodeNextDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ArachnodeNextDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDiscoveries = new DiscoveriesDataTable();
            base.Tables.Add(this.tableDiscoveries);
            this.tableCrawlRequests = new CrawlRequestsDataTable();
            base.Tables.Add(this.tableCrawlRequests);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiscoveries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCrawlRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ArachnodeNextDataSet ds = new ArachnodeNextDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DiscoveriesRowChangeEventHandler(object sender, DiscoveriesRowChangeEvent e);
        
        public delegate void CrawlRequestsRowChangeEventHandler(object sender, CrawlRequestsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiscoveriesDataTable : global::System.Data.TypedTableBase<DiscoveriesRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAbsoluteUri;
            
            private global::System.Data.DataColumn columnDiscoveryStateID;
            
            private global::System.Data.DataColumn columnDiscoveryTypeID;
            
            private global::System.Data.DataColumn columnExpectFileOrImage;
            
            private global::System.Data.DataColumn columnNumberOfTimesDiscovered;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesDataTable() {
                this.TableName = "Discoveries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiscoveriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiscoveriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsoluteUriColumn {
                get {
                    return this.columnAbsoluteUri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoveryStateIDColumn {
                get {
                    return this.columnDiscoveryStateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoveryTypeIDColumn {
                get {
                    return this.columnDiscoveryTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectFileOrImageColumn {
                get {
                    return this.columnExpectFileOrImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfTimesDiscoveredColumn {
                get {
                    return this.columnNumberOfTimesDiscovered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRow this[int index] {
                get {
                    return ((DiscoveriesRow)(this.Rows[index]));
                }
            }
            
            public event DiscoveriesRowChangeEventHandler DiscoveriesRowChanging;
            
            public event DiscoveriesRowChangeEventHandler DiscoveriesRowChanged;
            
            public event DiscoveriesRowChangeEventHandler DiscoveriesRowDeleting;
            
            public event DiscoveriesRowChangeEventHandler DiscoveriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiscoveriesRow(DiscoveriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRow AddDiscoveriesRow(long ID, string AbsoluteUri, byte DiscoveryStateID, byte DiscoveryTypeID, bool ExpectFileOrImage, int NumberOfTimesDiscovered) {
                DiscoveriesRow rowDiscoveriesRow = ((DiscoveriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AbsoluteUri,
                        DiscoveryStateID,
                        DiscoveryTypeID,
                        ExpectFileOrImage,
                        NumberOfTimesDiscovered};
                rowDiscoveriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDiscoveriesRow);
                return rowDiscoveriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRow FindByAbsoluteUri(string AbsoluteUri) {
                return ((DiscoveriesRow)(this.Rows.Find(new object[] {
                            AbsoluteUri})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DiscoveriesDataTable cln = ((DiscoveriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DiscoveriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAbsoluteUri = base.Columns["AbsoluteUri"];
                this.columnDiscoveryStateID = base.Columns["DiscoveryStateID"];
                this.columnDiscoveryTypeID = base.Columns["DiscoveryTypeID"];
                this.columnExpectFileOrImage = base.Columns["ExpectFileOrImage"];
                this.columnNumberOfTimesDiscovered = base.Columns["NumberOfTimesDiscovered"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAbsoluteUri = new global::System.Data.DataColumn("AbsoluteUri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsoluteUri);
                this.columnDiscoveryStateID = new global::System.Data.DataColumn("DiscoveryStateID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoveryStateID);
                this.columnDiscoveryTypeID = new global::System.Data.DataColumn("DiscoveryTypeID", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoveryTypeID);
                this.columnExpectFileOrImage = new global::System.Data.DataColumn("ExpectFileOrImage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectFileOrImage);
                this.columnNumberOfTimesDiscovered = new global::System.Data.DataColumn("NumberOfTimesDiscovered", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfTimesDiscovered);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAbsoluteUri}, true));
                this.columnAbsoluteUri.AllowDBNull = false;
                this.columnAbsoluteUri.Unique = true;
                this.columnAbsoluteUri.MaxLength = 884;
                this.columnDiscoveryStateID.AllowDBNull = false;
                this.columnDiscoveryTypeID.AllowDBNull = false;
                this.columnExpectFileOrImage.AllowDBNull = false;
                this.columnNumberOfTimesDiscovered.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRow NewDiscoveriesRow() {
                return ((DiscoveriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DiscoveriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DiscoveriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscoveriesRowChanged != null)) {
                    this.DiscoveriesRowChanged(this, new DiscoveriesRowChangeEvent(((DiscoveriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscoveriesRowChanging != null)) {
                    this.DiscoveriesRowChanging(this, new DiscoveriesRowChangeEvent(((DiscoveriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscoveriesRowDeleted != null)) {
                    this.DiscoveriesRowDeleted(this, new DiscoveriesRowChangeEvent(((DiscoveriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscoveriesRowDeleting != null)) {
                    this.DiscoveriesRowDeleting(this, new DiscoveriesRowChangeEvent(((DiscoveriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiscoveriesRow(DiscoveriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ArachnodeNextDataSet ds = new ArachnodeNextDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiscoveriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CrawlRequestsDataTable : global::System.Data.TypedTableBase<CrawlRequestsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnAbsoluteUri1;
            
            private global::System.Data.DataColumn columnAbsoluteUri2;
            
            private global::System.Data.DataColumn columnCurrentDepth;
            
            private global::System.Data.DataColumn columnMaximumDepth;
            
            private global::System.Data.DataColumn columnPriority;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsDataTable() {
                this.TableName = "CrawlRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrawlRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CrawlRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsoluteUri1Column {
                get {
                    return this.columnAbsoluteUri1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsoluteUri2Column {
                get {
                    return this.columnAbsoluteUri2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentDepthColumn {
                get {
                    return this.columnCurrentDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumDepthColumn {
                get {
                    return this.columnMaximumDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRow this[int index] {
                get {
                    return ((CrawlRequestsRow)(this.Rows[index]));
                }
            }
            
            public event CrawlRequestsRowChangeEventHandler CrawlRequestsRowChanging;
            
            public event CrawlRequestsRowChangeEventHandler CrawlRequestsRowChanged;
            
            public event CrawlRequestsRowChangeEventHandler CrawlRequestsRowDeleting;
            
            public event CrawlRequestsRowChangeEventHandler CrawlRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCrawlRequestsRow(CrawlRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRow AddCrawlRequestsRow(System.DateTime Created, string AbsoluteUri1, string AbsoluteUri2, int CurrentDepth, int MaximumDepth, double Priority) {
                CrawlRequestsRow rowCrawlRequestsRow = ((CrawlRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Created,
                        AbsoluteUri1,
                        AbsoluteUri2,
                        CurrentDepth,
                        MaximumDepth,
                        Priority};
                rowCrawlRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCrawlRequestsRow);
                return rowCrawlRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRow FindByID(long ID) {
                return ((CrawlRequestsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CrawlRequestsDataTable cln = ((CrawlRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CrawlRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCreated = base.Columns["Created"];
                this.columnAbsoluteUri1 = base.Columns["AbsoluteUri1"];
                this.columnAbsoluteUri2 = base.Columns["AbsoluteUri2"];
                this.columnCurrentDepth = base.Columns["CurrentDepth"];
                this.columnMaximumDepth = base.Columns["MaximumDepth"];
                this.columnPriority = base.Columns["Priority"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnAbsoluteUri1 = new global::System.Data.DataColumn("AbsoluteUri1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsoluteUri1);
                this.columnAbsoluteUri2 = new global::System.Data.DataColumn("AbsoluteUri2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsoluteUri2);
                this.columnCurrentDepth = new global::System.Data.DataColumn("CurrentDepth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentDepth);
                this.columnMaximumDepth = new global::System.Data.DataColumn("MaximumDepth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumDepth);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnCreated.AllowDBNull = false;
                this.columnAbsoluteUri1.AllowDBNull = false;
                this.columnAbsoluteUri1.MaxLength = 884;
                this.columnAbsoluteUri2.AllowDBNull = false;
                this.columnAbsoluteUri2.MaxLength = 884;
                this.columnCurrentDepth.AllowDBNull = false;
                this.columnMaximumDepth.AllowDBNull = false;
                this.columnPriority.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRow NewCrawlRequestsRow() {
                return ((CrawlRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CrawlRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CrawlRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CrawlRequestsRowChanged != null)) {
                    this.CrawlRequestsRowChanged(this, new CrawlRequestsRowChangeEvent(((CrawlRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CrawlRequestsRowChanging != null)) {
                    this.CrawlRequestsRowChanging(this, new CrawlRequestsRowChangeEvent(((CrawlRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CrawlRequestsRowDeleted != null)) {
                    this.CrawlRequestsRowDeleted(this, new CrawlRequestsRowChangeEvent(((CrawlRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CrawlRequestsRowDeleting != null)) {
                    this.CrawlRequestsRowDeleting(this, new CrawlRequestsRowChangeEvent(((CrawlRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCrawlRequestsRow(CrawlRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ArachnodeNextDataSet ds = new ArachnodeNextDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CrawlRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiscoveriesRow : global::System.Data.DataRow {
            
            private DiscoveriesDataTable tableDiscoveries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiscoveriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscoveries = ((DiscoveriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableDiscoveries.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'Discoveries\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscoveries.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbsoluteUri {
                get {
                    return ((string)(this[this.tableDiscoveries.AbsoluteUriColumn]));
                }
                set {
                    this[this.tableDiscoveries.AbsoluteUriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DiscoveryStateID {
                get {
                    return ((byte)(this[this.tableDiscoveries.DiscoveryStateIDColumn]));
                }
                set {
                    this[this.tableDiscoveries.DiscoveryStateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DiscoveryTypeID {
                get {
                    return ((byte)(this[this.tableDiscoveries.DiscoveryTypeIDColumn]));
                }
                set {
                    this[this.tableDiscoveries.DiscoveryTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExpectFileOrImage {
                get {
                    return ((bool)(this[this.tableDiscoveries.ExpectFileOrImageColumn]));
                }
                set {
                    this[this.tableDiscoveries.ExpectFileOrImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumberOfTimesDiscovered {
                get {
                    return ((int)(this[this.tableDiscoveries.NumberOfTimesDiscoveredColumn]));
                }
                set {
                    this[this.tableDiscoveries.NumberOfTimesDiscoveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableDiscoveries.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableDiscoveries.IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CrawlRequestsRow : global::System.Data.DataRow {
            
            private CrawlRequestsDataTable tableCrawlRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrawlRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCrawlRequests = ((CrawlRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ID {
                get {
                    return ((long)(this[this.tableCrawlRequests.IDColumn]));
                }
                set {
                    this[this.tableCrawlRequests.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((global::System.DateTime)(this[this.tableCrawlRequests.CreatedColumn]));
                }
                set {
                    this[this.tableCrawlRequests.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbsoluteUri1 {
                get {
                    return ((string)(this[this.tableCrawlRequests.AbsoluteUri1Column]));
                }
                set {
                    this[this.tableCrawlRequests.AbsoluteUri1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbsoluteUri2 {
                get {
                    return ((string)(this[this.tableCrawlRequests.AbsoluteUri2Column]));
                }
                set {
                    this[this.tableCrawlRequests.AbsoluteUri2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrentDepth {
                get {
                    return ((int)(this[this.tableCrawlRequests.CurrentDepthColumn]));
                }
                set {
                    this[this.tableCrawlRequests.CurrentDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaximumDepth {
                get {
                    return ((int)(this[this.tableCrawlRequests.MaximumDepthColumn]));
                }
                set {
                    this[this.tableCrawlRequests.MaximumDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Priority {
                get {
                    return ((double)(this[this.tableCrawlRequests.PriorityColumn]));
                }
                set {
                    this[this.tableCrawlRequests.PriorityColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiscoveriesRowChangeEvent : global::System.EventArgs {
            
            private DiscoveriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRowChangeEvent(DiscoveriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscoveriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CrawlRequestsRowChangeEvent : global::System.EventArgs {
            
            private CrawlRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRowChangeEvent(CrawlRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrawlRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Arachnode.DataSource.Next.ArachnodeNextDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DiscoveriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DiscoveriesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Discoveries";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("AbsoluteUri", "AbsoluteUri");
            tableMapping.ColumnMappings.Add("DiscoveryStateID", "DiscoveryStateID");
            tableMapping.ColumnMappings.Add("DiscoveryTypeID", "DiscoveryTypeID");
            tableMapping.ColumnMappings.Add("ExpectFileOrImage", "ExpectFileOrImage");
            tableMapping.ColumnMappings.Add("NumberOfTimesDiscovered", "NumberOfTimesDiscovered");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM Discoveries\r\nWHERE        (AbsoluteUri = @AbsoluteUri)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO Discoveries
                         (ID, AbsoluteUri, DiscoveryStateID, DiscoveryTypeID, ExpectFileOrImage, NumberOfTimesDiscovered)
VALUES        (@ID,@AbsoluteUri,@DiscoveryStateID,@DiscoveryTypeID,@ExpectFileOrImage,@NumberOfTimesDiscovered)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DiscoveryStateID", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "DiscoveryStateID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DiscoveryTypeID", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "DiscoveryTypeID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ExpectFileOrImage", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpectFileOrImage", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NumberOfTimesDiscovered", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "NumberOfTimesDiscovered", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       Discoveries
SET                ID = @ID, DiscoveryStateID = @DiscoveryStateID, DiscoveryTypeID = @DiscoveryTypeID, ExpectFileOrImage = @ExpectFileOrImage, 
                         NumberOfTimesDiscovered = @NumberOfTimesDiscovered
WHERE        (AbsoluteUri = @AbsoluteUri)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ID", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "ID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DiscoveryStateID", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "DiscoveryStateID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@DiscoveryTypeID", global::System.Data.SqlDbType.TinyInt, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "DiscoveryTypeID", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@ExpectFileOrImage", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, true, 0, 0, "ExpectFileOrImage", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@NumberOfTimesDiscovered", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "NumberOfTimesDiscovered", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::Arachnode.DataSource.Properties.Settings.Default.Arachnode_Discoveries_Next_ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        ID, AbsoluteUri, DiscoveryStateID, DiscoveryTypeID, ExpectFileOrIma" +
                "ge, NumberOfTimesDiscovered\r\nFROM            Discoveries\r\nWHERE        (Absolute" +
                "Uri = @AbsoluteUri)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ArachnodeNextDataSet.DiscoveriesDataTable dataTable, string AbsoluteUri) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((AbsoluteUri == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(AbsoluteUri));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ArachnodeNextDataSet.DiscoveriesDataTable GetData(string AbsoluteUri) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((AbsoluteUri == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(AbsoluteUri));
            }
            ArachnodeNextDataSet.DiscoveriesDataTable dataTable = new ArachnodeNextDataSet.DiscoveriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ArachnodeNextDataSet.DiscoveriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ArachnodeNextDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Discoveries");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string AbsoluteUri) {
            if ((AbsoluteUri == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(AbsoluteUri));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> ID, string AbsoluteUri, byte DiscoveryStateID, byte DiscoveryTypeID, bool ExpectFileOrImage, int NumberOfTimesDiscovered) {
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((AbsoluteUri == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AbsoluteUri));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(DiscoveryStateID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((byte)(DiscoveryTypeID));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(ExpectFileOrImage));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(NumberOfTimesDiscovered));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> ID, string AbsoluteUri, byte DiscoveryStateID, byte DiscoveryTypeID, bool ExpectFileOrImage, int NumberOfTimesDiscovered) {
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((AbsoluteUri == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AbsoluteUri));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(DiscoveryStateID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((byte)(DiscoveryTypeID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(ExpectFileOrImage));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(NumberOfTimesDiscovered));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CrawlRequestsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlServerCe.SqlCeDataAdapter _adapter;
        
        private global::System.Data.SqlServerCe.SqlCeConnection _connection;
        
        private global::System.Data.SqlServerCe.SqlCeCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CrawlRequestsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlServerCe.SqlCeDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlServerCe.SqlCeConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlServerCe.SqlCeCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlServerCe.SqlCeDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CrawlRequests";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Created", "Created");
            tableMapping.ColumnMappings.Add("AbsoluteUri1", "AbsoluteUri1");
            tableMapping.ColumnMappings.Add("AbsoluteUri2", "AbsoluteUri2");
            tableMapping.ColumnMappings.Add("CurrentDepth", "CurrentDepth");
            tableMapping.ColumnMappings.Add("MaximumDepth", "MaximumDepth");
            tableMapping.ColumnMappings.Add("Priority", "Priority");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM CrawlRequests\r\nWHERE        (AbsoluteUri1 = @AbsoluteUri1) AND (Absol" +
                "uteUri2 = @AbsoluteUri2)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri1", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri1", global::System.Data.DataRowVersion.Original, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri2", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri2", global::System.Data.DataRowVersion.Original, null));
            this._adapter.InsertCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO CrawlRequests\r\n                         (Created, AbsoluteUri1, Absol" +
                "uteUri2, CurrentDepth, MaximumDepth, Priority)\r\nVALUES        (@Created,@Absolut" +
                "eUri1,@AbsoluteUri2,@CurrentDepth,@MaximumDepth,@Priority)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Created", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Created", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri1", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri1", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri2", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri2", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CurrentDepth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CurrentDepth", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@MaximumDepth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "MaximumDepth", global::System.Data.DataRowVersion.Current, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Priority", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Priority", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE       CrawlRequests\r\nSET                CurrentDepth = @CurrentDepth, Maxi" +
                "mumDepth = @MaximumDepth, Priority = @Priority\r\nWHERE        (AbsoluteUri1 = @Ab" +
                "soluteUri1) AND (AbsoluteUri2 = @AbsoluteUri2)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri1", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri1", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri2", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri2", global::System.Data.DataRowVersion.Original, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@CurrentDepth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "CurrentDepth", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@MaximumDepth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, true, 0, 0, "MaximumDepth", global::System.Data.DataRowVersion.Current, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Priority", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Priority", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlServerCe.SqlCeConnection();
            this._connection.ConnectionString = global::Arachnode.DataSource.Properties.Settings.Default.Arachnode_CrawlRequests_Next_ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlServerCe.SqlCeCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        TOP (@MaximumNumberOfCrawlRequestsToCreatePerBatch) ID, Created, Ab" +
                "soluteUri1, AbsoluteUri2, CurrentDepth, MaximumDepth, Priority\r\nFROM            " +
                "CrawlRequests\r\nORDER BY Priority DESC, Created";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlServerCe.SqlCeParameter param = new global::System.Data.SqlServerCe.SqlCeParameter();
            param.ParameterName = "@MaximumNumberOfCrawlRequestsToCreatePerBatch";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            this._commandCollection[0].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ArachnodeNextDataSet.CrawlRequestsDataTable dataTable, int MaximumNumberOfCrawlRequestsToCreatePerBatch) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(MaximumNumberOfCrawlRequestsToCreatePerBatch));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ArachnodeNextDataSet.CrawlRequestsDataTable GetData(int MaximumNumberOfCrawlRequestsToCreatePerBatch) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(MaximumNumberOfCrawlRequestsToCreatePerBatch));
            ArachnodeNextDataSet.CrawlRequestsDataTable dataTable = new ArachnodeNextDataSet.CrawlRequestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ArachnodeNextDataSet.CrawlRequestsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ArachnodeNextDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CrawlRequests");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string AbsoluteUri1, string AbsoluteUri2) {
            if ((AbsoluteUri1 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(AbsoluteUri1));
            }
            if ((AbsoluteUri2 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri2");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(AbsoluteUri2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime Created, string AbsoluteUri1, string AbsoluteUri2, int CurrentDepth, int MaximumDepth, double Priority) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(Created));
            if ((AbsoluteUri1 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AbsoluteUri1));
            }
            if ((AbsoluteUri2 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri2");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AbsoluteUri2));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(CurrentDepth));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(MaximumDepth));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Priority));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string AbsoluteUri1, string AbsoluteUri2, int CurrentDepth, int MaximumDepth, double Priority) {
            if ((AbsoluteUri1 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(AbsoluteUri1));
            }
            if ((AbsoluteUri2 == null)) {
                throw new global::System.ArgumentNullException("AbsoluteUri2");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AbsoluteUri2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(CurrentDepth));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(MaximumDepth));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Priority));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlServerCe.SqlCeCommand();
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlServerCe.SqlCeConnection(global::Arachnode.DataSource.Properties.Settings.Default.Arachnode_Discoveries_Next_ConnectionString);
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[0])).CommandText = "DELETE FROM Discoveries";
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlServerCe.SqlCeCommand();
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlServerCe.SqlCeConnection(global::Arachnode.DataSource.Properties.Settings.Default.Arachnode_CrawlRequests_Next_ConnectionString);
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[1])).CommandText = "DELETE FROM CrawlRequests";
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlServerCe.SqlCeCommand();
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlServerCe.SqlCeConnection(global::Arachnode.DataSource.Properties.Settings.Default.Arachnode_Exceptions_Next_ConnectionString);
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).CommandText = "INSERT INTO Exceptions\r\n                         (Created, AbsoluteUri1, Absolute" +
                "Uri2, HelpLink, Message, Source, StackTrace)\r\nVALUES        (@Created,@AbsoluteU" +
                "ri1,@AbsoluteUri2,@HelpLink,@Message,@Source,@StackTrace)";
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.Text;
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Created", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, true, 0, 0, "Created", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri1", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri1", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@AbsoluteUri2", global::System.Data.SqlDbType.NVarChar, 884, global::System.Data.ParameterDirection.Input, true, 0, 0, "AbsoluteUri2", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@HelpLink", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, true, 0, 0, "HelpLink", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Message", global::System.Data.SqlDbType.NVarChar, 2000, global::System.Data.ParameterDirection.Input, true, 0, 0, "Message", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@Source", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, true, 0, 0, "Source", global::System.Data.DataRowVersion.Current, null));
            ((global::System.Data.SqlServerCe.SqlCeCommand)(this._commandCollection[2])).Parameters.Add(new global::System.Data.SqlServerCe.SqlCeParameter("@StackTrace", global::System.Data.SqlDbType.NVarChar, 4000, global::System.Data.ParameterDirection.Input, true, 0, 0, "StackTrace", global::System.Data.DataRowVersion.Current, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int ResetDiscoveries() {
            global::System.Data.SqlServerCe.SqlCeCommand command = ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[0]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int ResetCrawlRequests() {
            global::System.Data.SqlServerCe.SqlCeCommand command = ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[1]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertException(System.DateTime Created, string AbsoluteUri1, string AbsoluteUri2, string HelpLink, string Message, string Source, string StackTrace) {
            global::System.Data.SqlServerCe.SqlCeCommand command = ((global::System.Data.SqlServerCe.SqlCeCommand)(this.CommandCollection[2]));
            command.Parameters[0].Value = ((System.DateTime)(Created));
            if ((AbsoluteUri1 == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(AbsoluteUri1));
            }
            if ((AbsoluteUri2 == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(AbsoluteUri2));
            }
            if ((HelpLink == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(HelpLink));
            }
            if ((Message == null)) {
                throw new global::System.ArgumentNullException("Message");
            }
            else {
                command.Parameters[4].Value = ((string)(Message));
            }
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                command.Parameters[5].Value = ((string)(Source));
            }
            if ((StackTrace == null)) {
                throw new global::System.ArgumentNullException("StackTrace");
            }
            else {
                command.Parameters[6].Value = ((string)(StackTrace));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591