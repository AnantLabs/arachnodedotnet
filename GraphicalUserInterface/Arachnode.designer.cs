#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arachnode.GraphicalUserInterface
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="arachnode.net")]
	public partial class ArachnodeDataSourceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAllowedDataType(AllowedDataType instance);
    partial void UpdateAllowedDataType(AllowedDataType instance);
    partial void DeleteAllowedDataType(AllowedDataType instance);
    partial void InsertVersion(Version instance);
    partial void UpdateVersion(Version instance);
    partial void DeleteVersion(Version instance);
    partial void InsertAllowedExtension(AllowedExtension instance);
    partial void UpdateAllowedExtension(AllowedExtension instance);
    partial void DeleteAllowedExtension(AllowedExtension instance);
    partial void InsertAllowedScheme(AllowedScheme instance);
    partial void UpdateAllowedScheme(AllowedScheme instance);
    partial void DeleteAllowedScheme(AllowedScheme instance);
    partial void InsertConfiguration(Configuration instance);
    partial void UpdateConfiguration(Configuration instance);
    partial void DeleteConfiguration(Configuration instance);
    partial void InsertConfigurationType(ConfigurationType instance);
    partial void UpdateConfigurationType(ConfigurationType instance);
    partial void DeleteConfigurationType(ConfigurationType instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertContentTypeType(ContentTypeType instance);
    partial void UpdateContentTypeType(ContentTypeType instance);
    partial void DeleteContentTypeType(ContentTypeType instance);
    partial void InsertCrawlAction(CrawlAction instance);
    partial void UpdateCrawlAction(CrawlAction instance);
    partial void DeleteCrawlAction(CrawlAction instance);
    partial void InsertCrawlActionType(CrawlActionType instance);
    partial void UpdateCrawlActionType(CrawlActionType instance);
    partial void DeleteCrawlActionType(CrawlActionType instance);
    partial void InsertCrawlRule(CrawlRule instance);
    partial void UpdateCrawlRule(CrawlRule instance);
    partial void DeleteCrawlRule(CrawlRule instance);
    partial void InsertCrawlRuleType(CrawlRuleType instance);
    partial void UpdateCrawlRuleType(CrawlRuleType instance);
    partial void DeleteCrawlRuleType(CrawlRuleType instance);
    partial void InsertDisallowedDomain(DisallowedDomain instance);
    partial void UpdateDisallowedDomain(DisallowedDomain instance);
    partial void DeleteDisallowedDomain(DisallowedDomain instance);
    partial void InsertDisallowedExtension(DisallowedExtension instance);
    partial void UpdateDisallowedExtension(DisallowedExtension instance);
    partial void DeleteDisallowedExtension(DisallowedExtension instance);
    partial void InsertDisallowedFileExtension(DisallowedFileExtension instance);
    partial void UpdateDisallowedFileExtension(DisallowedFileExtension instance);
    partial void DeleteDisallowedFileExtension(DisallowedFileExtension instance);
    partial void InsertDisallowedHost(DisallowedHost instance);
    partial void UpdateDisallowedHost(DisallowedHost instance);
    partial void DeleteDisallowedHost(DisallowedHost instance);
    partial void InsertDisallowedScheme(DisallowedScheme instance);
    partial void UpdateDisallowedScheme(DisallowedScheme instance);
    partial void DeleteDisallowedScheme(DisallowedScheme instance);
    partial void InsertDisallowedWord(DisallowedWord instance);
    partial void UpdateDisallowedWord(DisallowedWord instance);
    partial void DeleteDisallowedWord(DisallowedWord instance);
    partial void InsertEngineAction(EngineAction instance);
    partial void UpdateEngineAction(EngineAction instance);
    partial void DeleteEngineAction(EngineAction instance);
    partial void InsertEngineActionType(EngineActionType instance);
    partial void UpdateEngineActionType(EngineActionType instance);
    partial void DeleteEngineActionType(EngineActionType instance);
    partial void InsertFullTextIndexType(FullTextIndexType instance);
    partial void UpdateFullTextIndexType(FullTextIndexType instance);
    partial void DeleteFullTextIndexType(FullTextIndexType instance);
    partial void InsertPriority(Priority instance);
    partial void UpdatePriority(Priority instance);
    partial void DeletePriority(Priority instance);
    #endregion
		
		public ArachnodeDataSourceDataContext() : 
				base(global::Arachnode.GraphicalUserInterface.Properties.Settings.Default.arachnode_netConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ArachnodeDataSourceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArachnodeDataSourceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArachnodeDataSourceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ArachnodeDataSourceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllowedDataType> AllowedDataTypes
		{
			get
			{
				return this.GetTable<AllowedDataType>();
			}
		}
		
		public System.Data.Linq.Table<Version> Versions
		{
			get
			{
				return this.GetTable<Version>();
			}
		}
		
		public System.Data.Linq.Table<AllowedExtension> AllowedExtensions
		{
			get
			{
				return this.GetTable<AllowedExtension>();
			}
		}
		
		public System.Data.Linq.Table<AllowedScheme> AllowedSchemes
		{
			get
			{
				return this.GetTable<AllowedScheme>();
			}
		}
		
		public System.Data.Linq.Table<Configuration> Configurations
		{
			get
			{
				return this.GetTable<Configuration>();
			}
		}
		
		public System.Data.Linq.Table<ConfigurationType> ConfigurationTypes
		{
			get
			{
				return this.GetTable<ConfigurationType>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<ContentTypeType> ContentTypeTypes
		{
			get
			{
				return this.GetTable<ContentTypeType>();
			}
		}
		
		public System.Data.Linq.Table<CrawlAction> CrawlActions
		{
			get
			{
				return this.GetTable<CrawlAction>();
			}
		}
		
		public System.Data.Linq.Table<CrawlActionType> CrawlActionTypes
		{
			get
			{
				return this.GetTable<CrawlActionType>();
			}
		}
		
		public System.Data.Linq.Table<CrawlRule> CrawlRules
		{
			get
			{
				return this.GetTable<CrawlRule>();
			}
		}
		
		public System.Data.Linq.Table<CrawlRuleType> CrawlRuleTypes
		{
			get
			{
				return this.GetTable<CrawlRuleType>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedDomain> DisallowedDomains
		{
			get
			{
				return this.GetTable<DisallowedDomain>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedExtension> DisallowedExtensions
		{
			get
			{
				return this.GetTable<DisallowedExtension>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedFileExtension> DisallowedFileExtensions
		{
			get
			{
				return this.GetTable<DisallowedFileExtension>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedHost> DisallowedHosts
		{
			get
			{
				return this.GetTable<DisallowedHost>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedScheme> DisallowedSchemes
		{
			get
			{
				return this.GetTable<DisallowedScheme>();
			}
		}
		
		public System.Data.Linq.Table<DisallowedWord> DisallowedWords
		{
			get
			{
				return this.GetTable<DisallowedWord>();
			}
		}
		
		public System.Data.Linq.Table<EngineAction> EngineActions
		{
			get
			{
				return this.GetTable<EngineAction>();
			}
		}
		
		public System.Data.Linq.Table<EngineActionType> EngineActionTypes
		{
			get
			{
				return this.GetTable<EngineActionType>();
			}
		}
		
		public System.Data.Linq.Table<FullTextIndexType> FullTextIndexTypes
		{
			get
			{
				return this.GetTable<FullTextIndexType>();
			}
		}
		
		public System.Data.Linq.Table<Priority> Priorities
		{
			get
			{
				return this.GetTable<Priority>();
			}
		}
	}
	
	[Table(Name="cfg.AllowedDataTypes")]
	public partial class AllowedDataType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContentTypeID;
		
		private byte _DiscoveryTypeID;
		
		private string _FullTextIndexType;
		
		private string _Overrides;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContentTypeIDChanging(int value);
    partial void OnContentTypeIDChanged();
    partial void OnDiscoveryTypeIDChanging(byte value);
    partial void OnDiscoveryTypeIDChanged();
    partial void OnFullTextIndexTypeChanging(string value);
    partial void OnFullTextIndexTypeChanged();
    partial void OnOverridesChanging(string value);
    partial void OnOverridesChanged();
    #endregion
		
		public AllowedDataType()
		{
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentTypeID", DbType="Int NOT NULL")]
		public int ContentTypeID
		{
			get
			{
				return this._ContentTypeID;
			}
			set
			{
				if ((this._ContentTypeID != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeID = value;
					this.SendPropertyChanged("ContentTypeID");
					this.OnContentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_DiscoveryTypeID", DbType="TinyInt NOT NULL")]
		public byte DiscoveryTypeID
		{
			get
			{
				return this._DiscoveryTypeID;
			}
			set
			{
				if ((this._DiscoveryTypeID != value))
				{
					this.OnDiscoveryTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DiscoveryTypeID = value;
					this.SendPropertyChanged("DiscoveryTypeID");
					this.OnDiscoveryTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullTextIndexType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FullTextIndexType
		{
			get
			{
				return this._FullTextIndexType;
			}
			set
			{
				if ((this._FullTextIndexType != value))
				{
					this.OnFullTextIndexTypeChanging(value);
					this.SendPropertyChanging();
					this._FullTextIndexType = value;
					this.SendPropertyChanged("FullTextIndexType");
					this.OnFullTextIndexTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Overrides", DbType="VarChar(255)")]
		public string Overrides
		{
			get
			{
				return this._Overrides;
			}
			set
			{
				if ((this._Overrides != value))
				{
					this.OnOverridesChanging(value);
					this.SendPropertyChanging();
					this._Overrides = value;
					this.SendPropertyChanged("Overrides");
					this.OnOverridesChanged();
				}
			}
		}
		
		[Association(Name="ContentType_AllowedDataType", Storage="_ContentType", ThisKey="ContentTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.AllowedDataTypes.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.AllowedDataTypes.Add(this);
						this._ContentTypeID = value.ID;
					}
					else
					{
						this._ContentTypeID = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.Version")]
	public partial class Version : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Value;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Version()
		{
			OnCreated();
		}
		
		[Column(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.AllowedExtensions")]
	public partial class AllowedExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Extension;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    #endregion
		
		public AllowedExtension()
		{
			OnCreated();
		}
		
		[Column(Storage="_Extension", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.AllowedSchemes")]
	public partial class AllowedScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Scheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    #endregion
		
		public AllowedScheme()
		{
			OnCreated();
		}
		
		[Column(Storage="_Scheme", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.Configuration")]
	public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ConfigurationTypeID;
		
		private string _Key;
		
		private object _Value;
		
		private string _Help;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigurationTypeIDChanging(byte value);
    partial void OnConfigurationTypeIDChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(object value);
    partial void OnValueChanged();
    partial void OnHelpChanging(string value);
    partial void OnHelpChanged();
    #endregion
		
		public Configuration()
		{
			OnCreated();
		}
		
		[Column(Storage="_ConfigurationTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ConfigurationTypeID
		{
			get
			{
				return this._ConfigurationTypeID;
			}
			set
			{
				if ((this._ConfigurationTypeID != value))
				{
					this.OnConfigurationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationTypeID = value;
					this.SendPropertyChanged("ConfigurationTypeID");
					this.OnConfigurationTypeIDChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Variant NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public object Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Help", DbType="VarChar(500)")]
		public string Help
		{
			get
			{
				return this._Help;
			}
			set
			{
				if ((this._Help != value))
				{
					this.OnHelpChanging(value);
					this.SendPropertyChanging();
					this._Help = value;
					this.SendPropertyChanged("Help");
					this.OnHelpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.ConfigurationTypes")]
	public partial class ConfigurationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ConfigurationType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.ContentTypes")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContentTypeTypeID;
		
		private string _Name;
		
		private EntitySet<AllowedDataType> _AllowedDataTypes;
		
		private EntityRef<ContentTypeType> _ContentTypeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContentTypeTypeIDChanging(int value);
    partial void OnContentTypeTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContentType()
		{
			this._AllowedDataTypes = new EntitySet<AllowedDataType>(new Action<AllowedDataType>(this.attach_AllowedDataTypes), new Action<AllowedDataType>(this.detach_AllowedDataTypes));
			this._ContentTypeType = default(EntityRef<ContentTypeType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContentTypeTypeID", DbType="Int NOT NULL")]
		public int ContentTypeTypeID
		{
			get
			{
				return this._ContentTypeTypeID;
			}
			set
			{
				if ((this._ContentTypeTypeID != value))
				{
					if (this._ContentTypeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentTypeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeTypeID = value;
					this.SendPropertyChanged("ContentTypeTypeID");
					this.OnContentTypeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContentType_AllowedDataType", Storage="_AllowedDataTypes", ThisKey="ID", OtherKey="ContentTypeID")]
		public EntitySet<AllowedDataType> AllowedDataTypes
		{
			get
			{
				return this._AllowedDataTypes;
			}
			set
			{
				this._AllowedDataTypes.Assign(value);
			}
		}
		
		[Association(Name="ContentTypeType_ContentType", Storage="_ContentTypeType", ThisKey="ContentTypeTypeID", OtherKey="ID", IsForeignKey=true)]
		public ContentTypeType ContentTypeType
		{
			get
			{
				return this._ContentTypeType.Entity;
			}
			set
			{
				ContentTypeType previousValue = this._ContentTypeType.Entity;
				if (((previousValue != value) 
							|| (this._ContentTypeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentTypeType.Entity = null;
						previousValue.ContentTypes.Remove(this);
					}
					this._ContentTypeType.Entity = value;
					if ((value != null))
					{
						value.ContentTypes.Add(this);
						this._ContentTypeTypeID = value.ID;
					}
					else
					{
						this._ContentTypeTypeID = default(int);
					}
					this.SendPropertyChanged("ContentTypeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllowedDataTypes(AllowedDataType entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_AllowedDataTypes(AllowedDataType entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[Table(Name="cfg.ContentTypeTypes")]
	public partial class ContentTypeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ContentType> _ContentTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContentTypeType()
		{
			this._ContentTypes = new EntitySet<ContentType>(new Action<ContentType>(this.attach_ContentTypes), new Action<ContentType>(this.detach_ContentTypes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContentTypeType_ContentType", Storage="_ContentTypes", ThisKey="ID", OtherKey="ContentTypeTypeID")]
		public EntitySet<ContentType> ContentTypes
		{
			get
			{
				return this._ContentTypes;
			}
			set
			{
				this._ContentTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentTypes(ContentType entity)
		{
			this.SendPropertyChanging();
			entity.ContentTypeType = this;
		}
		
		private void detach_ContentTypes(ContentType entity)
		{
			this.SendPropertyChanging();
			entity.ContentTypeType = null;
		}
	}
	
	[Table(Name="cfg.CrawlActions")]
	public partial class CrawlAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _CrawlActionTypeID;
		
		private string _AssemblyName;
		
		private string _TypeName;
		
		private bool _IsEnabled;
		
		private byte _Order;
		
		private string _Settings;
		
		private EntityRef<CrawlActionType> _CrawlActionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCrawlActionTypeIDChanging(byte value);
    partial void OnCrawlActionTypeIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnOrderChanging(byte value);
    partial void OnOrderChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    #endregion
		
		public CrawlAction()
		{
			this._CrawlActionType = default(EntityRef<CrawlActionType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CrawlActionTypeID", DbType="TinyInt NOT NULL")]
		public byte CrawlActionTypeID
		{
			get
			{
				return this._CrawlActionTypeID;
			}
			set
			{
				if ((this._CrawlActionTypeID != value))
				{
					if (this._CrawlActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrawlActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CrawlActionTypeID = value;
					this.SendPropertyChanged("CrawlActionTypeID");
					this.OnCrawlActionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="TinyInt NOT NULL")]
		public byte Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="VarChar(1000)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Association(Name="CrawlActionType_CrawlAction", Storage="_CrawlActionType", ThisKey="CrawlActionTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CrawlActionType CrawlActionType
		{
			get
			{
				return this._CrawlActionType.Entity;
			}
			set
			{
				CrawlActionType previousValue = this._CrawlActionType.Entity;
				if (((previousValue != value) 
							|| (this._CrawlActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CrawlActionType.Entity = null;
						previousValue.CrawlActions.Remove(this);
					}
					this._CrawlActionType.Entity = value;
					if ((value != null))
					{
						value.CrawlActions.Add(this);
						this._CrawlActionTypeID = value.ID;
					}
					else
					{
						this._CrawlActionTypeID = default(byte);
					}
					this.SendPropertyChanged("CrawlActionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.CrawlActionTypes")]
	public partial class CrawlActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private EntitySet<CrawlAction> _CrawlActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CrawlActionType()
		{
			this._CrawlActions = new EntitySet<CrawlAction>(new Action<CrawlAction>(this.attach_CrawlActions), new Action<CrawlAction>(this.detach_CrawlActions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CrawlActionType_CrawlAction", Storage="_CrawlActions", ThisKey="ID", OtherKey="CrawlActionTypeID")]
		public EntitySet<CrawlAction> CrawlActions
		{
			get
			{
				return this._CrawlActions;
			}
			set
			{
				this._CrawlActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CrawlActions(CrawlAction entity)
		{
			this.SendPropertyChanging();
			entity.CrawlActionType = this;
		}
		
		private void detach_CrawlActions(CrawlAction entity)
		{
			this.SendPropertyChanging();
			entity.CrawlActionType = null;
		}
	}
	
	[Table(Name="cfg.CrawlRules")]
	public partial class CrawlRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _CrawlRuleTypeID;
		
		private string _AssemblyName;
		
		private string _TypeName;
		
		private bool _IsEnabled;
		
		private byte _Order;
		
		private bool _OutputIsDisallowedReason;
		
		private string _Settings;
		
		private EntityRef<CrawlRuleType> _CrawlRuleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCrawlRuleTypeIDChanging(byte value);
    partial void OnCrawlRuleTypeIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnOrderChanging(byte value);
    partial void OnOrderChanged();
    partial void OnOutputIsDisallowedReasonChanging(bool value);
    partial void OnOutputIsDisallowedReasonChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    #endregion
		
		public CrawlRule()
		{
			this._CrawlRuleType = default(EntityRef<CrawlRuleType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CrawlRuleTypeID", DbType="TinyInt NOT NULL")]
		public byte CrawlRuleTypeID
		{
			get
			{
				return this._CrawlRuleTypeID;
			}
			set
			{
				if ((this._CrawlRuleTypeID != value))
				{
					if (this._CrawlRuleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrawlRuleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CrawlRuleTypeID = value;
					this.SendPropertyChanged("CrawlRuleTypeID");
					this.OnCrawlRuleTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="TinyInt NOT NULL")]
		public byte Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_OutputIsDisallowedReason", DbType="Bit NOT NULL")]
		public bool OutputIsDisallowedReason
		{
			get
			{
				return this._OutputIsDisallowedReason;
			}
			set
			{
				if ((this._OutputIsDisallowedReason != value))
				{
					this.OnOutputIsDisallowedReasonChanging(value);
					this.SendPropertyChanging();
					this._OutputIsDisallowedReason = value;
					this.SendPropertyChanged("OutputIsDisallowedReason");
					this.OnOutputIsDisallowedReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="VarChar(1000)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Association(Name="CrawlRuleType_CrawlRule", Storage="_CrawlRuleType", ThisKey="CrawlRuleTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CrawlRuleType CrawlRuleType
		{
			get
			{
				return this._CrawlRuleType.Entity;
			}
			set
			{
				CrawlRuleType previousValue = this._CrawlRuleType.Entity;
				if (((previousValue != value) 
							|| (this._CrawlRuleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CrawlRuleType.Entity = null;
						previousValue.CrawlRules.Remove(this);
					}
					this._CrawlRuleType.Entity = value;
					if ((value != null))
					{
						value.CrawlRules.Add(this);
						this._CrawlRuleTypeID = value.ID;
					}
					else
					{
						this._CrawlRuleTypeID = default(byte);
					}
					this.SendPropertyChanged("CrawlRuleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.CrawlRuleTypes")]
	public partial class CrawlRuleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private EntitySet<CrawlRule> _CrawlRules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CrawlRuleType()
		{
			this._CrawlRules = new EntitySet<CrawlRule>(new Action<CrawlRule>(this.attach_CrawlRules), new Action<CrawlRule>(this.detach_CrawlRules));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CrawlRuleType_CrawlRule", Storage="_CrawlRules", ThisKey="ID", OtherKey="CrawlRuleTypeID")]
		public EntitySet<CrawlRule> CrawlRules
		{
			get
			{
				return this._CrawlRules;
			}
			set
			{
				this._CrawlRules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CrawlRules(CrawlRule entity)
		{
			this.SendPropertyChanging();
			entity.CrawlRuleType = this;
		}
		
		private void detach_CrawlRules(CrawlRule entity)
		{
			this.SendPropertyChanging();
			entity.CrawlRuleType = null;
		}
	}
	
	[Table(Name="cfg.DisallowedDomains")]
	public partial class DisallowedDomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Domain;
		
		private bool _IsDisallowed;
		
		private string _Reason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnIsDisallowedChanging(bool value);
    partial void OnIsDisallowedChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public DisallowedDomain()
		{
			OnCreated();
		}
		
		[Column(Storage="_Domain", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowed", DbType="Bit NOT NULL")]
		public bool IsDisallowed
		{
			get
			{
				return this._IsDisallowed;
			}
			set
			{
				if ((this._IsDisallowed != value))
				{
					this.OnIsDisallowedChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowed = value;
					this.SendPropertyChanged("IsDisallowed");
					this.OnIsDisallowedChanged();
				}
			}
		}
		
		[Column(Storage="_Reason", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.DisallowedExtensions")]
	public partial class DisallowedExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Extension;
		
		private bool _IsDisallowed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnIsDisallowedChanging(bool value);
    partial void OnIsDisallowedChanged();
    #endregion
		
		public DisallowedExtension()
		{
			OnCreated();
		}
		
		[Column(Storage="_Extension", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowed", DbType="Bit NOT NULL")]
		public bool IsDisallowed
		{
			get
			{
				return this._IsDisallowed;
			}
			set
			{
				if ((this._IsDisallowed != value))
				{
					this.OnIsDisallowedChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowed = value;
					this.SendPropertyChanged("IsDisallowed");
					this.OnIsDisallowedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.DisallowedFileExtensions")]
	public partial class DisallowedFileExtension : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileExtension;
		
		private bool _IsDisallowed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    partial void OnIsDisallowedChanging(bool value);
    partial void OnIsDisallowedChanged();
    #endregion
		
		public DisallowedFileExtension()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileExtension", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowed", DbType="Bit NOT NULL")]
		public bool IsDisallowed
		{
			get
			{
				return this._IsDisallowed;
			}
			set
			{
				if ((this._IsDisallowed != value))
				{
					this.OnIsDisallowedChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowed = value;
					this.SendPropertyChanged("IsDisallowed");
					this.OnIsDisallowedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.DisallowedHosts")]
	public partial class DisallowedHost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Host;
		
		private bool _IsDisallowed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnIsDisallowedChanging(bool value);
    partial void OnIsDisallowedChanged();
    #endregion
		
		public DisallowedHost()
		{
			OnCreated();
		}
		
		[Column(Storage="_Host", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowed", DbType="Bit NOT NULL")]
		public bool IsDisallowed
		{
			get
			{
				return this._IsDisallowed;
			}
			set
			{
				if ((this._IsDisallowed != value))
				{
					this.OnIsDisallowedChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowed = value;
					this.SendPropertyChanged("IsDisallowed");
					this.OnIsDisallowedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.DisallowedSchemes")]
	public partial class DisallowedScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Scheme;
		
		private bool _IsDisallowed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    partial void OnIsDisallowedChanging(bool value);
    partial void OnIsDisallowedChanged();
    #endregion
		
		public DisallowedScheme()
		{
			OnCreated();
		}
		
		[Column(Storage="_Scheme", DbType="VarChar(884) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowed", DbType="Bit NOT NULL")]
		public bool IsDisallowed
		{
			get
			{
				return this._IsDisallowed;
			}
			set
			{
				if ((this._IsDisallowed != value))
				{
					this.OnIsDisallowedChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowed = value;
					this.SendPropertyChanged("IsDisallowed");
					this.OnIsDisallowedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.DisallowedWords")]
	public partial class DisallowedWord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Word;
		
		private bool _IsDisallowedForAbsoluteUri;
		
		private bool _IsDisallowedForResponseHeaders;
		
		private bool _IsDisallowedForSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnIsDisallowedForAbsoluteUriChanging(bool value);
    partial void OnIsDisallowedForAbsoluteUriChanged();
    partial void OnIsDisallowedForResponseHeadersChanging(bool value);
    partial void OnIsDisallowedForResponseHeadersChanged();
    partial void OnIsDisallowedForSourceChanging(bool value);
    partial void OnIsDisallowedForSourceChanged();
    #endregion
		
		public DisallowedWord()
		{
			OnCreated();
		}
		
		[Column(Storage="_Word", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowedForAbsoluteUri", DbType="Bit NOT NULL")]
		public bool IsDisallowedForAbsoluteUri
		{
			get
			{
				return this._IsDisallowedForAbsoluteUri;
			}
			set
			{
				if ((this._IsDisallowedForAbsoluteUri != value))
				{
					this.OnIsDisallowedForAbsoluteUriChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowedForAbsoluteUri = value;
					this.SendPropertyChanged("IsDisallowedForAbsoluteUri");
					this.OnIsDisallowedForAbsoluteUriChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowedForResponseHeaders", DbType="Bit NOT NULL")]
		public bool IsDisallowedForResponseHeaders
		{
			get
			{
				return this._IsDisallowedForResponseHeaders;
			}
			set
			{
				if ((this._IsDisallowedForResponseHeaders != value))
				{
					this.OnIsDisallowedForResponseHeadersChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowedForResponseHeaders = value;
					this.SendPropertyChanged("IsDisallowedForResponseHeaders");
					this.OnIsDisallowedForResponseHeadersChanged();
				}
			}
		}
		
		[Column(Storage="_IsDisallowedForSource", DbType="Bit NOT NULL")]
		public bool IsDisallowedForSource
		{
			get
			{
				return this._IsDisallowedForSource;
			}
			set
			{
				if ((this._IsDisallowedForSource != value))
				{
					this.OnIsDisallowedForSourceChanging(value);
					this.SendPropertyChanging();
					this._IsDisallowedForSource = value;
					this.SendPropertyChanged("IsDisallowedForSource");
					this.OnIsDisallowedForSourceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.EngineActions")]
	public partial class EngineAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _EngineActionTypeID;
		
		private string _AssemblyName;
		
		private string _TypeName;
		
		private bool _IsEnabled;
		
		private byte _Order;
		
		private string _Settings;
		
		private EntityRef<EngineActionType> _EngineActionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEngineActionTypeIDChanging(byte value);
    partial void OnEngineActionTypeIDChanged();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnOrderChanging(byte value);
    partial void OnOrderChanged();
    partial void OnSettingsChanging(string value);
    partial void OnSettingsChanged();
    #endregion
		
		public EngineAction()
		{
			this._EngineActionType = default(EntityRef<EngineActionType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EngineActionTypeID", DbType="TinyInt NOT NULL")]
		public byte EngineActionTypeID
		{
			get
			{
				return this._EngineActionTypeID;
			}
			set
			{
				if ((this._EngineActionTypeID != value))
				{
					if (this._EngineActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineActionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EngineActionTypeID = value;
					this.SendPropertyChanged("EngineActionTypeID");
					this.OnEngineActionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="TinyInt NOT NULL")]
		public byte Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="VarChar(1000)")]
		public string Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Association(Name="EngineActionType_EngineAction", Storage="_EngineActionType", ThisKey="EngineActionTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EngineActionType EngineActionType
		{
			get
			{
				return this._EngineActionType.Entity;
			}
			set
			{
				EngineActionType previousValue = this._EngineActionType.Entity;
				if (((previousValue != value) 
							|| (this._EngineActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EngineActionType.Entity = null;
						previousValue.EngineActions.Remove(this);
					}
					this._EngineActionType.Entity = value;
					if ((value != null))
					{
						value.EngineActions.Add(this);
						this._EngineActionTypeID = value.ID;
					}
					else
					{
						this._EngineActionTypeID = default(byte);
					}
					this.SendPropertyChanged("EngineActionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.EngineActionTypes")]
	public partial class EngineActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private EntitySet<EngineAction> _EngineActions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EngineActionType()
		{
			this._EngineActions = new EntitySet<EngineAction>(new Action<EngineAction>(this.attach_EngineActions), new Action<EngineAction>(this.detach_EngineActions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EngineActionType_EngineAction", Storage="_EngineActions", ThisKey="ID", OtherKey="EngineActionTypeID")]
		public EntitySet<EngineAction> EngineActions
		{
			get
			{
				return this._EngineActions;
			}
			set
			{
				this._EngineActions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineActions(EngineAction entity)
		{
			this.SendPropertyChanging();
			entity.EngineActionType = this;
		}
		
		private void detach_EngineActions(EngineAction entity)
		{
			this.SendPropertyChanging();
			entity.EngineActionType = null;
		}
	}
	
	[Table(Name="cfg.FullTextIndexTypes")]
	public partial class FullTextIndexType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FullTextIndexType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullTextIndexType1Changing(string value);
    partial void OnFullTextIndexType1Changed();
    #endregion
		
		public FullTextIndexType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="FullTextIndexType", Storage="_FullTextIndexType1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FullTextIndexType1
		{
			get
			{
				return this._FullTextIndexType1;
			}
			set
			{
				if ((this._FullTextIndexType1 != value))
				{
					this.OnFullTextIndexType1Changing(value);
					this.SendPropertyChanging();
					this._FullTextIndexType1 = value;
					this.SendPropertyChanged("FullTextIndexType1");
					this.OnFullTextIndexType1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="cfg.Priorities")]
	public partial class Priority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Host;
		
		private double _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public Priority()
		{
			OnCreated();
		}
		
		[Column(Storage="_Host", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
